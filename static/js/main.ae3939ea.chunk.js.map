{"version":3,"sources":["Constant.js","TimerPanel/TimerPanel.js","App.js","reportWebVitals.js","index.js"],"names":["VhillaTimers","BlackMageTimers","MainPanelButtons","VhillaButtons","BlackMageButtons","Warning","ExpArr","Speech","SpeechSynthesisUtterance","lang","TimerPanel","props","renderPanel","PanelState","map","bt","i","Button","variant","onClick","switchPanel","startTimer","state","setState","CountDownTimer","CountDown","explain","setTimer","prevState","SendWarning","boss","clearStates","length","intr","setInterval","intervals","Intervals","push","txt","replace","text","window","speechSynthesis","speak","clearInterval","cancel","this","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3939ea.chunk.js","sourcesContent":["const VhillaTimers = [151, 126, 101];\r\nconst BlackMageTimers = [70, 70, 30];\r\n\r\nconst MainPanelButtons = [\"Verus Hilla\", \"Black Mage\"];\r\nconst VhillaButtons = [\"Verus Hilla P1\", \"Verus Hilla P2\", \"Verus Hilla P3\", \"End Timer\"];\r\nconst BlackMageButtons = [\"BM P2\", \"BM P3\", \"BM P4\", \"End Timer\"];\r\nconst Warning = \"Full Map Attack #seconds# later\";\r\n\r\nconst MainPanelExp = \"This is a simple timer for the hard boss verus hilla or black mage. Please choose one of the mode by clicking the button\";\r\nconst VhillaExp = \"Verus hilla has three phases. You will enter the P1 at exactly 29:42 so please press the P1 button when the boss run is loaded.\"+\r\n\"When the second HP bar is lower than around 35%, Vhilla enters P2. Please press P2 when the FMA happens. Finally. When the third HP bar is lower than around 20%\"+\r\n\" Vhilla enters P3. Please press P3 when the FMA happens.\"\r\n\r\nconst BlackMageExp = \"In BM P2&P3, each FMA is around 70 seconds (from one notification to another notification). In BM p4, the FMA is around 30 seconds.\"+\r\n\" Please press corresponding button at the beginning of each phase load.\"\r\n\r\nconst ExpArr = [MainPanelExp, VhillaExp, BlackMageExp];\r\n\r\nvar Speech = new SpeechSynthesisUtterance();\r\nSpeech.lang = \"en\";\r\n\r\nexport{\r\n    VhillaTimers,\r\n    VhillaButtons,\r\n    MainPanelButtons,\r\n    BlackMageTimers,\r\n    BlackMageButtons,\r\n    Warning,\r\n    ExpArr,\r\n    Speech,\r\n}\r\n","\nimport './TimerPanel.css';\nimport{\n  VhillaButtons,\n  VhillaTimers,\n  MainPanelButtons,\n  BlackMageButtons,\n  BlackMageTimers,\n  ExpArr,\n  Warning,\n  Speech\n} from '../Constant'\nimport Button from 'react-bootstrap/Button'\nimport React from 'react';\n\n\n\nclass TimerPanel extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      PanelState:0,\n      Intervals:[],\n      CountDown:0,\n      explain:ExpArr[0]\n    };\n  }\n\n  componentDidMount() {\n    \n  }\n\n  componentWillUnmount() {\n\n  }\n\n  renderPanel = (PanelState)=>{\n    if(PanelState === 0 || PanelState>2)\n      return MainPanelButtons.map((bt,i) => <Button variant = \"outline-dark\" onClick={()=>this.switchPanel(i+1)}>{bt}</Button>)\n    else if(PanelState === 1)\n      return VhillaButtons.map((bt,i) => <Button variant = \"outline-dark\" onClick={()=>this.startTimer(i, 0)}>{bt}</Button>)\n    else \n      return BlackMageButtons.map((bt,i) => <Button variant = \"outline-dark\" onClick={()=>this.startTimer(i, 1)}>{bt}</Button>)\n  }\n\n  switchPanel = (PanelState)=>{\n    if(PanelState !== this.state.PanelState)\n    {\n    this.setState({\n      PanelState:PanelState,\n      CountDownTimer:0,\n      CountDown:0,\n      explain:ExpArr[PanelState]\n    })\n   }\n  }\n  \n  setTimer=()=>{\n    this.setState(prevState=>({\n      CountDown:prevState.CountDown-1\n    }))\n    this.SendWarning(this.state.CountDown);\n    if(this.state.CountDown === 0)\n    this.setState({\n      CountDown:this.state.CountDownTimer\n    })\n  }\n\n  startTimer = (i, boss)=>{\n    this.clearStates();\n    if(boss === 0 )\n    {\n      if(i<VhillaTimers.length)\n      {\n        this.setState({\n          CountDown:VhillaTimers[i],\n          CountDownTimer:VhillaTimers[i]\n        })\n        \n        var intr = setInterval(\n          this.setTimer\n          ,1000\n          )\n        var intervals = this.state.Intervals;\n        intervals.push(intr);\n        this.setState({\n          Intervals:intervals\n        })\n      }\n      else\n      {\n        this.clearStates();\n        this.switchPanel(0);\n      }\n    }\n    else if(boss === 1)\n    {\n      if(i<BlackMageTimers.length)\n      {\n        this.setState({\n          CountDown:BlackMageTimers[i],\n          CountDownTimer:BlackMageTimers[i]\n        })\n        var intr = setInterval(\n          this.setTimer\n          ,1000\n          )\n        var intervals = this.state.Intervals;\n        intervals.push(intr);\n        this.setState({\n          Intervals:intervals\n        })\n      }\n      else\n      {\n        this.clearStates();\n        this.switchPanel(0);\n      }\n    }\n\n\n    \n    \n  }\n\n  SendWarning = (CountDown)=>{\n    if(CountDown === 100)\n    {\n      var txt = Warning;\n      txt = txt.replace(\"#seconds#\", CountDown+\" seconds\");\n      Speech.text = txt;\n      window.speechSynthesis.speak(Speech);\n    }\n    else if(CountDown === 60)\n    {\n      var txt = Warning;\n      txt = txt.replace(\"#seconds#\", CountDown+\" seconds\");\n      Speech.text = txt;\n      window.speechSynthesis.speak(Speech);\n    }\n    else if(CountDown === 30)\n    {\n      var txt = Warning;\n      txt = txt.replace(\"#seconds#\", CountDown+\" seconds\");\n      Speech.text = txt;\n      window.speechSynthesis.speak(Speech);\n    }\n    else if(CountDown === 10)\n    {\n      var txt = Warning;\n      txt = txt.replace(\"#seconds#\", CountDown+\" seconds\");\n      Speech.text = txt;\n      window.speechSynthesis.speak(Speech);\n    }\n  }\n\n  clearStates = ()=>{\n    var intervals = this.state.Intervals;\n    for(var i=0;i<intervals.length;i++ )\n    {\n      clearInterval(intervals[i]);\n    }\n    this.setState({\n      Intervals:[]\n    })\n    window.speechSynthesis.cancel();\n  }\n\n\n\n\n  render(){\n    return(\n    <div>\n      {this.renderPanel(this.state.PanelState)}\n      <p>The remained timer is {this.state.CountDown}</p>\n      <br/>\n      <p>{this.state.explain}</p>\n    </div>\n    );\n  }   \n}\n\nexport default TimerPanel;\n","\nimport './App.css';\nimport React from 'react';\nimport TimerPanel from './TimerPanel/TimerPanel'\n\n\n\nfunction App(){\n    return(\n    <div className=\"App\">\n      <TimerPanel></TimerPanel>\n    </div>\n    );\n}   \n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}